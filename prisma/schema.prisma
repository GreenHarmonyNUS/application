generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Skill {
  id     Int     @id @default(autoincrement())
  name   String
  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.VarChar(30)
}

model User {
  id            String    @id @default(cuid()) @db.VarChar(30)
  email         String    @unique
  emailVerified DateTime?
  phone String?
  name                   String?
  gender                 String?
  image                  String?
  maritalStatus          String?
  volunteerStatus        String?
  preferredName          String?
  preferredCommunication String?
  preferredStartDate     DateTime?
  birthYear              Int?
  residentialDistrict    Int?
  roles                  String[]
  skills                 Skill[]

  emergencyName         String?
  emergencyRelationship String?
  emergencyPhone        String?

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  Account Account[]
  Session Session[]
  Event   Event[]
}

enum ApprovalStatus {
  APPROVED
  PENDING
  CANCELLED
}

model Metrics {
  id      Int     @id @default(autoincrement())
  type    String
  unit    String?
  value   Float
  Event   Event?  @relation(fields: [eventId], references: [id])
  eventId Int?
}

model EventLocation {
  id          Int     @id @default(autoincrement())
  name        String
  latitude    Float?
  longitude   Float?
  description String?
  Event       Event[]
}

model EventTag {
  name    String
  Event   Event  @relation(fields: [eventId], references: [id])
  eventId Int

  @@id([eventId, name])
}

model EventRegistrations {
  event       Event  @relation(fields: [eventId], references: [id])
  eventId     Int
  participant String

  @@id([eventId, participant])
}

model Event {
  id             Int            @id @default(autoincrement())
  name           String
  timestamp      DateTime
  duration       Int
  location       EventLocation  @relation(fields: [eventLocationId], references: [id])
  details        String
  organiser      User           @relation(fields: [userId], references: [id])
  approvalStatus ApprovalStatus @default(PENDING)
  metrics        Metrics[]
  tags           EventTag[]
  image          String?

  eventLocationId    Int
  EventRegistrations EventRegistrations[]
  userId             String               @db.VarChar(30)
}

model Account {
  id                String  @id @default(cuid()) @db.VarChar(30)
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @db.VarChar(30)
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
